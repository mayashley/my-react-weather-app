{"version":3,"sources":["Components/heading.js","Components/button.js","Components/form.js","Components/forecast.js","App.js","serviceWorker.js","index.js"],"names":["Heading","props","className","Button","Form","onSubmit","loadWeather","type","name","placeholder","id","Forecast","country","city","temperature","wind","clouds","error","api_key","App","state","getWeather","event","a","target","elements","value","preventDefault","fetch","api_call","json","response","console","log","cod","setState","main","temp","sys","speed","all","alert","message","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yYAUeA,G,MAPC,SAACC,GACf,OACE,yBAAKC,UAAU,oBACb,kDCISC,G,MAPA,SAAAF,GACb,OACE,yBAAKC,UAAU,mBACb,uDCgBSE,G,MAlBF,SAACH,GACZ,OACE,yBAAKC,UAAU,iBACb,0BAAMG,SAAYJ,EAAMK,aACtB,yBAAKJ,UAAU,mBACf,2BAAOK,KAAK,OAAOC,KAAK,OAAOC,YAAY,uBAE3C,yBAAKP,UAAU,mBACf,2BAAOQ,GAAG,UAAUH,KAAK,OAAOC,KAAK,UAAUC,YAAY,kBAE3D,yBAAKP,UAAU,UACf,kBAAC,EAAD,WCmBOS,G,MA/BE,SAAAV,GACf,OACE,yBAAKC,UAAU,oBACf,yBAAKA,UAAU,WACZD,EAAMW,SAAWX,EAAMY,MACtB,2BACE,6CACCZ,EAAMY,KAFT,KAEiBZ,EAAMW,QAAS,KAIjCX,EAAMa,aACL,2BACE,8CADF,IAC6Bb,EAAMa,YADnC,UAIDb,EAAMc,MACL,2BACE,6CADF,IAC4Bd,EAAMc,KADlC,QAIDd,EAAMe,QACL,2BACE,8CADF,IAC6Bf,EAAMe,OADnC,MAIDf,EAAMgB,OAAS,2BAAIhB,EAAMgB,WCtB1BC,G,MAAU,oCA6DDC,E,2MA1DbC,MAAQ,CACNN,YAAa,GACbF,QAAS,GACTC,KAAM,GACNE,KAAM,GACNC,OAAQ,GACRC,MAAO,I,EAGTI,W,uCAAa,WAAMC,GAAN,qBAAAC,EAAA,6DACLV,EAAOS,EAAME,OAAOC,SAASZ,KAAKa,MAClCd,EAAUU,EAAME,OAAOC,SAASb,QAAQc,MAC9CJ,EAAMK,iBAHK,SAIYC,MAAM,qDAAD,OAC2Bf,EAD3B,YACmCD,EADnC,iCACmEM,IALpF,UAILW,EAJK,QAQPhB,IAAQD,EARD,iCASciB,EAASC,OATvB,OASHC,EATG,OAUTC,QAAQC,IAAIF,GACS,MAAjBA,EAASG,KAAgC,QAAjBH,EAASG,IACnC,EAAKC,SAAS,CACZrB,YAAaiB,EAASK,KAAKC,KAC3BxB,KAAMkB,EAASvB,KACfI,QAASmB,EAASO,IAAI1B,QACtBG,KAAMgB,EAAShB,KAAKwB,MACpBvB,OAAQe,EAASf,OAAOwB,IACxBvB,MAAO,KAGTwB,MAAMV,EAASW,SArBR,wBAwBT,EAAKP,SAAS,CACZlB,MAAO,mCAzBA,4C,8HA+BX,OACE,yBAAKf,UAAU,aACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAMI,YAAaqC,KAAKtB,aAExB,kBAAC,EAAD,CACEP,YAAa6B,KAAKvB,MAAMN,YACxBD,KAAM8B,KAAKvB,MAAMP,KACjBD,QAAS+B,KAAKvB,MAAMR,QACpBG,KAAM4B,KAAKvB,MAAML,KACjBC,OAAQ2B,KAAKvB,MAAMJ,OACnBC,MAAO0B,KAAKvB,MAAMH,a,GApDV2B,IAAMC,WCGJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.d8db93ef.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./heading.css\";\r\n\r\nconst Heading = (props) => {\r\n  return (\r\n    <div className=\"headingContainer\">\r\n      <h1>Current Weather</h1>\r\n    </div>\r\n  );\r\n};\r\nexport default Heading;\r\n","import React from \"react\";\r\nimport \"./button.css\";\r\n\r\nconst Button = props => {\r\n  return (\r\n    <div className=\"buttonContainer\">\r\n      <button>Get your weather</button>\r\n    </div>\r\n  );\r\n};\r\nexport default Button;\r\n","import React from \"react\";\r\nimport Button from \"./button\";\r\nimport \"./form.css\";\r\n\r\nconst Form = (props) => {\r\n  return (\r\n    <div className=\"formContainer\" >\r\n      <form onSubmit = {props.loadWeather}>\r\n        <div className=\"inputContainers\">\r\n        <input type=\"text\" name=\"city\" placeholder=\"Your city here...\" />\r\n        </div>\r\n        <div className=\"inputContainers\">\r\n        <input id=\"country\" type=\"text\" name=\"country\" placeholder=\"Your country\" />\r\n        </div>\r\n        <div className=\"button\">\r\n        <Button/>\r\n        </div>\r\n        </form>\r\n    </div>\r\n    \r\n  );\r\n};\r\nexport default Form;\r\n","import React from \"react\";\r\nimport \"./forecast.css\";\r\n\r\nconst Forecast = props => {\r\n  return (\r\n    <div className=\"weatherContainer\">\r\n    <div className=\"weather\">\r\n      {props.country && props.city && (\r\n        <p>\r\n          <span> Location: </span>\r\n          {props.city}, {props.country}{\" \"}\r\n        </p>\r\n      )}\r\n\r\n      {props.temperature && (\r\n        <p>\r\n          <span>Temperature:</span> {props.temperature} Â°F\r\n        </p>\r\n      )}\r\n      {props.wind && (\r\n        <p>\r\n          <span>Wind Speed:</span> {props.wind} mph\r\n        </p>\r\n      )}\r\n      {props.clouds && (\r\n        <p>\r\n          <span>Cloud Cover:</span> {props.clouds} %\r\n        </p>\r\n      )}\r\n      {props.error && <p>{props.error}</p>}\r\n    </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Forecast;\r\n","import React from \"react\";\nimport Heading from \"./Components/heading\";\nimport Form from \"./Components/form\";\n// import Button from \"./Components/button\";\nimport Forecast from \"./Components/forecast\";\nimport \"./App.css\";\n\nconst api_key = \"260ebc9c40f0b4f64cbb4359c3b98794\";\n\nclass App extends React.Component {\n  state = {\n    temperature: \"\",\n    country: \"\",\n    city: \"\",\n    wind: \"\",\n    clouds: \"\",\n    error: \"\"\n  };\n\n  getWeather = async event => {\n    const city = event.target.elements.city.value;\n    const country = event.target.elements.country.value;\n    event.preventDefault();\n    const api_call = await fetch(\n      `https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&units=imperial&appid=${api_key}`\n    );\n\n    if (city && country) {\n      const response = await api_call.json();\n      console.log(response);\n      if (response.cod === 200 || response.cod === \"200\") {\n        this.setState({\n          temperature: response.main.temp,\n          city: response.name,\n          country: response.sys.country,\n          wind: response.wind.speed,\n          clouds: response.clouds.all,\n          error: \"\"\n        });\n      } else {\n        alert(response.message);\n      }\n    } else {\n      this.setState({\n        error: \"Please fill in input fields...\"\n      });\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"container\">\n        <Heading />\n        <Form loadWeather={this.getWeather} />\n        {/* <Button/> */}\n        <Forecast\n          temperature={this.state.temperature}\n          city={this.state.city}\n          country={this.state.country}\n          wind={this.state.wind}\n          clouds={this.state.clouds}\n          error={this.state.error}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}